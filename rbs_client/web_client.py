"""
web_client.py ‚Äî Streamlit‚Äë–∫–ª–∏–µ–Ω—Ç –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç pandas/numpy.
–†–∞–±–æ—Ç–∞–µ—Ç —Å –≤–∞—à–∏–º FastAPI‚Äë—Å–µ—Ä–≤–µ—Ä–æ–º: –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç
/preview –∏ /list –ø—Ä–æ—Å—Ç—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏.
"""

from io import BytesIO
from pathlib import Path
import json

from fastapi.openapi.models import APIKey
import requests
import streamlit as st

API_URL = "http://msi.lan:8000"  # –º–µ–Ω—è–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

# -----------------------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç—ã
# -----------------------------------------------------------------------------


def _safe_rerun():
    if hasattr(st, "experimental_rerun"):
        st.experimental_rerun()
    elif hasattr(st, "rerun"):
        st.rerun()


def upload_file(path: Path):
    with path.open("rb") as fh:
        files = {"file": (path.name, fh, "application/octet-stream")}
        requests.post(f"{API_URL}/upload", files=files).raise_for_status()


def upload_directory(dir_path: Path):
    file_list = [p for p in dir_path.rglob("*") if p.is_file()]
    total = len(file_list)
    if total == 0:
        st.warning("–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞")
        return 0, 0

    prog = st.progress(0.0, text="–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤‚Ä¶")
    ok = err = 0
    for idx, file in enumerate(file_list, 1):
        try:
            upload_file(file)
            ok += 1
        except Exception as exc:
            st.warning(f"{file.name}: {exc}")
            err += 1
        prog.progress(idx / total, text=f"{idx}/{total} –∑–∞–≥—Ä—É–∂–µ–Ω–æ‚Ä¶")
    prog.empty()
    return ok, err


def fetch_preview(file: str, limit: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ /preview –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ dict –ª–∏–±–æ None –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    try:
        resp = requests.get(f"{API_URL}/preview",
                            params={"file": file, "limit": limit})
        resp.raise_for_status()
        return resp.json()          # ‚Üê –≥–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    except Exception as exc:
        st.error(f"–û—à–∏–±–∫–∞ /preview {file}: {exc}")
        return None


def list_uploaded():
    try:
        resp = requests.get(f"{API_URL}/list", params={"name": ""})
        resp.raise_for_status()
        return resp.json().get("files", [])
    except Exception as exc:
        st.error(f"–û—à–∏–±–∫–∞ /list: {exc}")
        return []


# -----------------------------------------------------------------------------
# CSS ‚Äî —Å–∫—Ä—ã—Ç—å –ª–∏—à–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
# -----------------------------------------------------------------------------
_HIDE = """
<style>
#MainMenu, header, footer {visibility: hidden;}
div[data-testid="stDeployButton"], .viewerBadge_container__1QSob {display: none;}
</style>
"""

# -----------------------------------------------------------------------------
# UI
# -----------------------------------------------------------------------------


def main():
    st.set_page_config("RBS Uploader", page_icon="üìÇ", layout="wide")
    st.markdown(_HIDE, unsafe_allow_html=True)

    left, right = st.columns([3, 2], gap="large")

    # ---------------- –õ–ï–í–ê–Ø –ö–û–õ–û–ù–ö–ê ----------------
    with left:
        st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ (–ø–∞–ø–∫–∞)")
        dir_path_str = st.text_input(
            "–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ", placeholder="/abs/path/to/dir"
        )
        if dir_path_str and Path(dir_path_str).is_dir():
            if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã"):
                with st.spinner("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã‚Ä¶"):
                    ok, err = upload_directory(Path(dir_path_str))
                st.success(f"–£—Å–ø–µ—à–Ω–æ: {ok}, –æ—à–∏–±–æ–∫: {err}")
                _safe_rerun()
        elif dir_path_str:
            st.warning("–ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è")

        st.divider()
        st.header("–ò–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã")
        files = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã", accept_multiple_files=True)
        if files and st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"):
            ok = err = 0
            with st.spinner("–ü–µ—Ä–µ–¥–∞—ë–º‚Ä¶"):
                for f in files:
                    try:
                        requests.post(
                            f"{API_URL}/upload",
                            files={
                                "file": (
                                    f.name,
                                    BytesIO(f.getvalue()),
                                    "application/octet-stream",
                                )
                            },
                        ).raise_for_status()
                        ok += 1
                    except Exception as exc:
                        st.warning(f"{f.name}: {exc}")
                        err += 1
            st.success(f"–£—Å–ø–µ—à–Ω–æ: {ok}, –æ—à–∏–±–æ–∫: {err}")
            _safe_rerun()

    # ---------------- –ü–†–ê–í–ê–Ø –ö–û–õ–û–ù–ö–ê ----------------
    with right:
        st.header("–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö –≤ rbs-cloud")

        st.subheader("–°–ø–∏—Å–æ–∫ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤")
        preview_ds = fetch_preview("datasets", 10)
        if preview_ds:
            st.dataframe(preview_ds, use_container_width=True)
        else:
            st.info("–°–ø–∏—Å–æ–∫ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –ø—É—Å—Ç")

        st.subheader("–°–ø–∏—Å–æ–∫ –≤–µ—Å–æ–≤")
        preview_w = fetch_preview("weights", 10)
        if preview_w:
            st.dataframe(preview_w, use_container_width=True)
        else:
            st.info("–°–ø–∏—Å–æ–∫ –≤–µ—Å–æ–≤ –ø—É—Å—Ç")

        st.button("–û–±–Ω–æ–≤–∏—Ç—å", on_click=_safe_rerun)


if __name__ == "__main__":
    main()
