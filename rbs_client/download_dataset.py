import requests
from pathlib import Path

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
SERVER = "http://localhost:8000"
LIST_URL = f"{SERVER}/list"
DOWNLOAD_URL = f"{SERVER}/download"
DATASET_ROOT = "converted_dataset"
SAVE_ROOT = "downloaded_data"


def get_dataset(name:str):
    print("üì• –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        response = requests.get(LIST_URL, params={"name": name})
        response.raise_for_status()
        return response.json().get("files", [])
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞:", str(e))
        return []


def download_file(relative_path):
    save_path = Path(SAVE_ROOT) / relative_path
    save_path.parent.mkdir(parents=True, exist_ok=True)

    print(f"‚¨áÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞: {relative_path}")
    try:
        response = requests.get(DOWNLOAD_URL, params={"filename": str(relative_path)}, stream=True)
        response.raise_for_status()
        with open(save_path, "wb") as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {save_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {relative_path}: {str(e)}")


if __name__ == "__main__":
    files = get_dataset(DATASET_ROOT)
    if not files:
        print("‚ùóÔ∏è–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
    else:
        for file_path in files:
            download_file(DATASET_ROOT + "/" +file_path)
